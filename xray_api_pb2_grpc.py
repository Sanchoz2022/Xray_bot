# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
"""Client and server classes corresponding to protobuf-defined services."""
import grpc

import xray_api_pb2 as xray__api__pb2


class HandlerServiceStub(object):
    """HandlerService handles user and system operations.
    """

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.AddInbound = channel.unary_unary(
                '/xray.app.proxyman.command.HandlerService/AddInbound',
                request_serializer=xray__api__pb2.AddInboundRequest.SerializeToString,
                response_deserializer=xray__api__pb2.AddInboundResponse.FromString,
                )
        self.RemoveInbound = channel.unary_unary(
                '/xray.app.proxyman.command.HandlerService/RemoveInbound',
                request_serializer=xray__api__pb2.RemoveInboundRequest.SerializeToString,
                response_deserializer=xray__api__pb2.RemoveInboundResponse.FromString,
                )
        self.AlterInbound = channel.unary_unary(
                '/xray.app.proxyman.command.HandlerService/AlterInbound',
                request_serializer=xray__api__pb2.AlterInboundRequest.SerializeToString,
                response_deserializer=xray__api__pb2.AlterInboundResponse.FromString,
                )
        self.AddUser = channel.unary_unary(
                '/xray.app.proxyman.command.HandlerService/AddUser',
                request_serializer=xray__api__pb2.AddUserRequest.SerializeToString,
                response_deserializer=xray__api__pb2.AddUserResponse.FromString,
                )
        self.RemoveUser = channel.unary_unary(
                '/xray.app.proxyman.command.HandlerService/RemoveUser',
                request_serializer=xray__api__pb2.RemoveUserRequest.SerializeToString,
                response_deserializer=xray__api__pb2.RemoveUserResponse.FromString,
                )


class HandlerServiceServicer(object):
    """HandlerService handles user and system operations.
    """

    def AddInbound(self, request, context):
        """AddInbound adds a new inbound handler.
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def RemoveInbound(self, request, context):
        """RemoveInbound removes an inbound handler.
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def AlterInbound(self, request, context):
        """AlterInbound alters an inbound handler.
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def AddUser(self, request, context):
        """AddUser adds a new user.
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def RemoveUser(self, request, context):
        """RemoveUser removes a user.
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_HandlerServiceServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'AddInbound': grpc.unary_unary_rpc_method_handler(
                    servicer.AddInbound,
                    request_deserializer=xray__api__pb2.AddInboundRequest.FromString,
                    response_serializer=xray__api__pb2.AddInboundResponse.SerializeToString,
            ),
            'RemoveInbound': grpc.unary_unary_rpc_method_handler(
                    servicer.RemoveInbound,
                    request_deserializer=xray__api__pb2.RemoveInboundRequest.FromString,
                    response_serializer=xray__api__pb2.RemoveInboundResponse.SerializeToString,
            ),
            'AlterInbound': grpc.unary_unary_rpc_method_handler(
                    servicer.AlterInbound,
                    request_deserializer=xray__api__pb2.AlterInboundRequest.FromString,
                    response_serializer=xray__api__pb2.AlterInboundResponse.SerializeToString,
            ),
            'AddUser': grpc.unary_unary_rpc_method_handler(
                    servicer.AddUser,
                    request_deserializer=xray__api__pb2.AddUserRequest.FromString,
                    response_serializer=xray__api__pb2.AddUserResponse.SerializeToString,
            ),
            'RemoveUser': grpc.unary_unary_rpc_method_handler(
                    servicer.RemoveUser,
                    request_deserializer=xray__api__pb2.RemoveUserRequest.FromString,
                    response_serializer=xray__api__pb2.RemoveUserResponse.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'xray.app.proxyman.command.HandlerService', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))


 # This class is part of an EXPERIMENTAL API.
class HandlerService(object):
    """HandlerService handles user and system operations.
    """

    @staticmethod
    def AddInbound(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/xray.app.proxyman.command.HandlerService/AddInbound',
            xray__api__pb2.AddInboundRequest.SerializeToString,
            xray__api__pb2.AddInboundResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def RemoveInbound(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/xray.app.proxyman.command.HandlerService/RemoveInbound',
            xray__api__pb2.RemoveInboundRequest.SerializeToString,
            xray__api__pb2.RemoveInboundResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def AlterInbound(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/xray.app.proxyman.command.HandlerService/AlterInbound',
            xray__api__pb2.AlterInboundRequest.SerializeToString,
            xray__api__pb2.AlterInboundResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def AddUser(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/xray.app.proxyman.command.HandlerService/AddUser',
            xray__api__pb2.AddUserRequest.SerializeToString,
            xray__api__pb2.AddUserResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def RemoveUser(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/xray.app.proxyman.command.HandlerService/RemoveUser',
            xray__api__pb2.RemoveUserRequest.SerializeToString,
            xray__api__pb2.RemoveUserResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)


class StatsServiceStub(object):
    """StatsService handles statistics operations.
    """

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.GetStats = channel.unary_unary(
                '/xray.app.proxyman.command.StatsService/GetStats',
                request_serializer=xray__api__pb2.GetStatsRequest.SerializeToString,
                response_deserializer=xray__api__pb2.GetStatsResponse.FromString,
                )
        self.QueryStats = channel.unary_unary(
                '/xray.app.proxyman.command.StatsService/QueryStats',
                request_serializer=xray__api__pb2.QueryStatsRequest.SerializeToString,
                response_deserializer=xray__api__pb2.QueryStatsResponse.FromString,
                )
        self.GetUserStats = channel.unary_unary(
                '/xray.app.proxyman.command.StatsService/GetUserStats',
                request_serializer=xray__api__pb2.GetUserStatsRequest.SerializeToString,
                response_deserializer=xray__api__pb2.GetUserStatsResponse.FromString,
                )


class StatsServiceServicer(object):
    """StatsService handles statistics operations.
    """

    def GetStats(self, request, context):
        """GetStats gets system statistics.
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def QueryStats(self, request, context):
        """QueryStats queries statistics.
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def GetUserStats(self, request, context):
        """GetUserStats gets user statistics.
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_StatsServiceServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'GetStats': grpc.unary_unary_rpc_method_handler(
                    servicer.GetStats,
                    request_deserializer=xray__api__pb2.GetStatsRequest.FromString,
                    response_serializer=xray__api__pb2.GetStatsResponse.SerializeToString,
            ),
            'QueryStats': grpc.unary_unary_rpc_method_handler(
                    servicer.QueryStats,
                    request_deserializer=xray__api__pb2.QueryStatsRequest.FromString,
                    response_serializer=xray__api__pb2.QueryStatsResponse.SerializeToString,
            ),
            'GetUserStats': grpc.unary_unary_rpc_method_handler(
                    servicer.GetUserStats,
                    request_deserializer=xray__api__pb2.GetUserStatsRequest.FromString,
                    response_serializer=xray__api__pb2.GetUserStatsResponse.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'xray.app.proxyman.command.StatsService', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))


 # This class is part of an EXPERIMENTAL API.
class StatsService(object):
    """StatsService handles statistics operations.
    """

    @staticmethod
    def GetStats(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/xray.app.proxyman.command.StatsService/GetStats',
            xray__api__pb2.GetStatsRequest.SerializeToString,
            xray__api__pb2.GetStatsResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def QueryStats(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/xray.app.proxyman.command.StatsService/QueryStats',
            xray__api__pb2.QueryStatsRequest.SerializeToString,
            xray__api__pb2.QueryStatsResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def GetUserStats(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/xray.app.proxyman.command.StatsService/GetUserStats',
            xray__api__pb2.GetUserStatsRequest.SerializeToString,
            xray__api__pb2.GetUserStatsResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)
